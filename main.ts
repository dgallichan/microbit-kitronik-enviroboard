input.onButtonPressed(Button.A, function () {
    kitronik_air_quality.measureData()
    basic.pause(100)
    kitronik_air_quality.clear()
    kitronik_air_quality.show("T:" + kitronik_air_quality.readTemperature(kitronik_air_quality.TemperatureUnitList.C) + " C", 3, kitronik_air_quality.ShowAlign.Left)
    kitronik_air_quality.show("P:" + kitronik_air_quality.readPressure(kitronik_air_quality.PressureUnitList.Pa) + " Pa", 4, kitronik_air_quality.ShowAlign.Left)
    kitronik_air_quality.show("H:" + kitronik_air_quality.readHumidity() + "", 5, kitronik_air_quality.ShowAlign.Left)
    kitronik_air_quality.show("Air Q:" + kitronik_air_quality.getAirQualityPercent() + "", 6, kitronik_air_quality.ShowAlign.Left)
})
input.onButtonPressed(Button.AB, function () {
    kitronik_air_quality.sendAllData()
})
let statusLEDs = kitronik_air_quality.createAirQualityZIPDisplay()
basic.showIcon(IconNames.Umbrella)
kitronik_air_quality.clear()
kitronik_air_quality.setupGasSensor()
kitronik_air_quality.calcBaselines()
kitronik_air_quality.setTime(14, 42, 0)
kitronik_air_quality.setDate(27, 6, 23)
kitronik_air_quality.includeDate(kitronik_air_quality.onOff(true))
kitronik_air_quality.includeTime(kitronik_air_quality.onOff(true))
kitronik_air_quality.includeTemperature(kitronik_air_quality.TemperatureUnitList.C, kitronik_air_quality.onOff(true))
kitronik_air_quality.includePressure(kitronik_air_quality.PressureUnitList.Pa, kitronik_air_quality.onOff(true))
kitronik_air_quality.includeHumidity(kitronik_air_quality.onOff(true))
kitronik_air_quality.includeIAQ(kitronik_air_quality.onOff(true))
kitronik_air_quality.includeCO2(kitronik_air_quality.onOff(true))
kitronik_air_quality.includeLight(kitronik_air_quality.onOff(true))
loops.everyInterval(60000, function () {
    kitronik_air_quality.logData()
})
